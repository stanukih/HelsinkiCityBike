{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.auth.isAuthenticated()) {\n      return of(true);\n    } else {\n      this.router.navigate(['/login'], {\n        queryParams: {\n          accessDenied: true\n        }\n      });\n      return of(false);\n    }\n  }\n  canActivateChild(route, state) {\n    return this.canActivate(route, state);\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;;AAOrC,OAAM,MAAOC,SAAS;EAElBC,YAAoBC,IAAgB,EAAUC,MAAa;IAAvC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;EAEpD;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,IAAI,IAAI,CAACJ,IAAI,CAACK,eAAe,EAAE,EAAC;MAC5B,OAAOR,EAAE,CAAC,IAAI,CAAC;KAClB,MACG;MACA,IAAI,CAACI,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC7BC,WAAW,EAAC;UACRC,YAAY,EAAC;;OAEpB,CAAC;MACF,OAAOX,EAAE,CAAC,KAAK,CAAC;;EAGxB;EAEAY,gBAAgB,CAACN,KAA6B,EAAEC,KAA0B;IACtE,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAACC,KAAK,CAAC;EACxC;;AAtBSN,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFP;AAAM","names":["of","AuthGuard","constructor","auth","router","canActivate","route","state","isAuthenticated","navigate","queryParams","accessDenied","canActivateChild","factory","providedIn"],"sourceRoot":"","sources":["/home/stas/hcba/client/src/app/shared/classes/auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { Observable, of } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n\n@Injectable({\n    providedIn:'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild{\n    \n    constructor(private auth:AuthService, private router:Router){\n\n    }\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        if (this.auth.isAuthenticated()){\n            return of(true)\n        }\n        else{\n            this.router.navigate(['/login'], {\n                queryParams:{\n                    accessDenied:true\n                }\n            })\n            return of(false)\n        }\n        \n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        return this.canActivate(route,state)\n    }\n    \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}