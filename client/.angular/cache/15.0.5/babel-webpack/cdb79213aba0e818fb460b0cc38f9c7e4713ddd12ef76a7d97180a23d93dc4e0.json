{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class TokenInterseptor {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  intercept(req, next) {\n    if (this.auth.isAuthenticated()) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: this.auth.getToken()\n        }\n      });\n    }\n    return next.handle(req);\n  }\n}\nTokenInterseptor.ɵfac = function TokenInterseptor_Factory(t) {\n  return new (t || TokenInterseptor)(i0.ɵɵinject(i1.AuthService));\n};\nTokenInterseptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterseptor,\n  factory: TokenInterseptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,gBAAgB;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAc;EAEtCC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAI,IAAI,CAACH,IAAI,CAACI,eAAe,EAAE,EAAC;MAC5BF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC;QACZC,UAAU,EAAE;UACRC,aAAa,EAAC,IAAI,CAACP,IAAI,CAACQ,QAAQ;;OAEvC,CAAC;;IAEN,OAAOL,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EAC3B;;AAZSJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAY,SAAhBZ,gBAAgB;AAAA","names":["TokenInterseptor","constructor","auth","intercept","req","next","isAuthenticated","clone","setHeaders","Authorization","getToken","handle","factory"],"sourceRoot":"","sources":["/home/stas/hcba/client/src/app/shared/classes/token.interseptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({})\nexport class TokenInterseptor implements HttpInterceptor{\n    constructor(private auth:AuthService){}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.auth.isAuthenticated()){\n            req = req.clone({\n                setHeaders: {\n                    Authorization:this.auth.getToken()\n                }\n            })\n        }\n        return next.handle(req)\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}